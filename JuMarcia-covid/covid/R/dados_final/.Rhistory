layout = layout_with_fr(g100),
main = 'COVID-19 worldwide')
grafo.plot(mins = 1, maxs = 1000)
windows()
grafo.plot <- function(mins, maxs){
covid <- filter(banco_imputado, y >= mins & y < maxs) %>%
select(4:36) %>%
cor()
c100 <- graph.adjacency(covid,
weighted = TRUE,
diag = FALSE,
mode = "upper")
cut.off1 <- mean(E(c100)$weight)
g100 <- delete_edges(c100, E(c100)[weight < cut.off1])
c_g100 <- cluster_fast_greedy(g100)
plot(c_g100, g100,
#vertex.size = colSums(co_covid_positivo) * 10,
#vertex.frame.color = NA,
#vertex.label.color = "black",
#vertex.label.cex = 1,
edge.width = E(g100)$weight * 15,
layout = layout_with_fr(g100),
main = paste0('Between ', mins,' and ' , maxs, ' confirmed cases'))
}
grafo.plot(mins = 1, maxs = 1000)
grafo.plot(mins = 1000, maxs = 5000)
windows()
grafo.plot(mins = 1000, maxs = 5000)
grafo.plot(mins = 5000, maxs = 1000000)
#------------------------------ confirmados
df.temp <- read.csv2('time_series_covid19_confirmed_global.csv',
sep = ',', header = TRUE)
# longitude e latitude como numerica
df.temp$Lat <- as.numeric(as.character(df.temp$Lat))
df.temp$Long <- as.numeric(as.character(df.temp$Long))
aux <- data.frame(table(df.temp$Country.Region))
repeated.count <- as.character(aux[which(aux$Freq != 1),1])
temp = aggregate(.~Country.Region, data = df.temp, FUN = sum)
dfi <- read.table('indicadores.txt')
dfi$Country<- ifelse(dfi$Country == 'United States',
'US', as.character(dfi$Country))
dfc <- temp
colnames(dfc)[1] <- 'Country'
df <- merge(dfc, dfi, by = 'Country')
# 75 é o ultimo dia
banco <- df[,c(1,3, 4, (ncol(df)-53):(ncol(df)-51), (ncol(df)-49):ncol(df))]
write.table(banco, file = 'confirmados.txt')
#---- teve paises que não entraram, devem estar com nomes diferentes
#aux <- data.frame(table(c(as.character(df$Country), as.character(dfc$Country))))
#View(aux)
# Diamond Princess é um cruzeiro, não um país
# Diamond Princess é um cruzeiro, não um país
# MS Zaandam também é um cruzeiro
# Taiwan* ??? nao tem
# Taiwan* ??? nao tem
# Taiwan* ??? nao tem
# quantidade de NA em cada indicador econômico
NA.col <- round(apply(apply(auxiliar, 2, is.na), 2, sum)/nrow(auxiliar), 2)
var.70 <- c(colnames(banco)[1:6], names(NA.col)[which(as.numeric(NA.col) < 0.7)])
var.60 <- c(colnames(banco)[1:6], names(NA.col)[which(as.numeric(NA.col) < 0.6)])
var.50 <- c(colnames(banco)[1:6], names(NA.col)[which(as.numeric(NA.col) < 0.5)])
df.aux <- banco[,var.50]
set.seed(9)
index <- createDataPartition(banco_imputado$y, p = 0.85, list = FALSE)
train <- banco_imputado[index, ]
test  <- banco_imputado[-index, ]
require(caret)
set.seed(9)
index <- createDataPartition(banco_imputado$y, p = 0.85, list = FALSE)
train <- banco_imputado[index, ]
test  <- banco_imputado[-index, ]
fit_control <- trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
#sampling = "down",
search = "random")
rf_model <- train(y ~ .,
data = train[,-c(1:3)],
method = "rf",
preProcess = c("scale", "center"),
trControl = fit_control,
#tuneGrid = hiperparametros3,
verbose = FALSE,
tuneLength = 10)
rf_model
plot(rf_model)
importance_rf_model <- varImp(rf_model, scale = TRUE)
importance_rf_model
plot(importance_rf_model)
# B O O S T I N G
library(xgboost)
model_xgb <- caret::train(y ~ .,
data = train[,-c(1:3)],
method = "xgbTree",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
savePredictions = TRUE,
verboseIter = FALSE))
importance <- varImp(model_xgb, scale = TRUE)
plot(importance)
rf.pred <- predict(model_xgb, test[,-c(1:3, 6)])
rf.pred
model_xgb$pred
rf.pred$pred
rf.pred
xgb.pred <- predict(model_xgb, test[,-c(1:3, 6)])
model_xgb$pred
model_xgb$pred$pred
teste = model_xgb$pred
View(teste)
model_xgb <- caret::train(y ~ .,
data = banco_imputado[,-c(1:3)],
method = "xgbTree",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
savePredictions = TRUE,
verboseIter = FALSE))
model_xgb$pred
xgb.pred <- predict(model_xgb, banco_imputado[,-c(1:3, 6)])
xgb.pred
xgb.pred <- ceiling(predict(model_xgb, banco_imputado[,-c(1:3, 6)]))
ggplot2::ggplot() +
geom_point(aes(x = banco_imputado$y, y = xgb.pred))
model_xgb <- caret::train(y ~ .,
data = train[,-c(1:3)],
method = "xgbTree",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
savePredictions = TRUE,
verboseIter = FALSE))
importance <- varImp(model_xgb, scale = TRUE)
plot(importance)
xgb.pred <- ceiling(predict(model_xgb, test[,-c(1:3, 6)]))
ggplot2::ggplot() +
geom_point(aes(x = test$y, y = xgb.pred))
ggplot2::ggplot() +
geom_point(aes(x = test$y, y = xgb.pred)) +
geom_line(aes(1:200000, 1:200000))
ggplot2::ggplot() +
geom_point(aes(x = test$y, y = xgb.pred)) +
geom_line(aes(1:500000, 1:500000), linetype = 'dashed')
geom_line(aes(c(1,500000), c(1,500000), linetype = 'dashed')
a
ggplot2::ggplot() +
geom_point(aes(x = test$y, y = xgb.pred)) +
geom_line(aes(c(1,500000), c(1,500000)), linetype = 'dashed')
ggplot2::ggplot() +
geom_point(aes(x = test$y, y = xgb.pred)) +
geom_line(aes(c(1,500000), c(1,500000)), linetype = 'dashed')
View(test)
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,500000), c(1,500000)), linetype = 'dashed')
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,450000), c(1,450000)), linetype = 'dashed')
set.seed(19)
index <- createDataPartition(banco_imputado$y, p = 0.85, list = FALSE)
train <- banco_imputado[index, ]
test  <- banco_imputado[-index, ]
model_xgb <- caret::train(y ~ .,
data = train[,-c(1:3)],
method = "xgbTree",
preProcess = c("scale", "center"),
trControl = trainControl(method = "repeatedcv",
number = 10,
repeats = 1,
savePredictions = TRUE,
verboseIter = FALSE))
importance <- varImp(model_xgb, scale = TRUE)
plot(importance)
xgb.pred <- ceiling(predict(model_xgb, test[,-c(1:3, 6)]))
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,450000), c(1,450000)), linetype = 'dashed')
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,10000), c(1,10000)), linetype = 'dashed')
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,50000), c(1,50000)), linetype = 'dashed')
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,60000), c(1,60000)), linetype = 'dashed')
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed')
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_point(aes(y = test$y, x = xgb.pred), label = test$Country) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot(label = test$Country) +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot(label = test$Country) +
geom_text() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot(aes(label = test$Country)) +
geom_text() +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text(aes(label = test$Country)) +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot(aes(y = test$y, x = xgb.pred)) +
geom_text(aes(label = test$Country)) +
geom_point() +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text(aes(y = test$y, x = xgb.pred, label = test$Country)) +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
require(ggrepel)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y, x = xgb.pred, label = test$Country)) +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
df_uk <- which(test$Country == 'United Kingdom')
uk.line <- which(test$Country == 'United Kingdom')
uk.line
test$y[-uk.line]
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y[-uk.line],
x = xgb.pred[-uk.line],
label = test$Country[-uk.line])) +
geom_point(aes(y = test$y[-uk.line],
x = xgb.pred[-uk.line])) +
geom_line(aes(c(1,40000), c(1,40000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y[-uk.line],
x = xgb.pred[-uk.line],
label = test$Country[-uk.line])) +
geom_point(aes(y = test$y[-uk.line],
x = xgb.pred[-uk.line])) +
geom_line(aes(c(1,20000), c(1,20000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y[-uk.line],
x = xgb.pred[-uk.line],
label = test$Country[-uk.line])) +
geom_point(aes(y = test$y[-uk.line],
x = xgb.pred[-uk.line])) +
geom_line(aes(c(1,17000), c(1,17000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,10000), c(1,10000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,1000), c(1,1000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 20000) + ylim(0, 20000)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,10000), c(1,10000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 10000) + ylim(0, 10000)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,63000), c(1,63000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 63000) + ylim(0, 6300)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,6300), c(1,6300)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 6300) + ylim(0, 6300)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,3000), c(1,3000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 3000) + ylim(0, 3000)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,1000), c(1,1000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 1000) + ylim(0, 1000)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,600), c(1,600)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 600) + ylim(0, 600)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,500), c(1,500)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 500) + ylim(0, 500)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,300), c(1,300)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 300) + ylim(0, 300)
rf_model
rf.pred <- ceiling(predict(model_xgb, test[,-c(1:3, 6)]))
rf_model <- train(y ~ .,
data = train[,-c(1:3)],
method = "rf",
preProcess = c("scale", "center"),
trControl = fit_control,
#tuneGrid = hiperparametros3,
verbose = FALSE,
tuneLength = 10)
rf.pred <- ceiling(predict(rf_model, test[,-c(1:3, 6)]))
require(ggrepel)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y, x = rf.pred, label = test$Country)) +
geom_point(aes(y = test$y, x = rf.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y, x = rf.pred, label = test$Country)) +
geom_point(aes(y = test$y, x = rf.pred)) +
geom_line(aes(c(1,82000), c(1,82000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = rf.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = rf.pred)) +
geom_line(aes(c(1,300), c(1,300)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 300) + ylim(0, 300)
banco_imputado
View(banco_imputado)
covid
names(banco_imputado)
names(banco_imputado)[-1:3]
names(banco_imputado)[-c(1:3)]
names(banco_imputado)[-c(1:3)] <- c(33:34, y, 1:32)
names(banco_imputado)[-c(1:3)] <- c(33:34, 'y', 1:32)
grafo.plot <- function(mins, maxs){
names(banco_imputado)[-c(1:3)] <- c(33:34, 'y', 1:32)
covid <- filter(banco_imputado, y >= mins & y < maxs) %>%
select(4:36) %>%
cor()
c100 <- graph.adjacency(covid,
weighted = TRUE,
diag = FALSE,
mode = "upper")
cut.off1 <- mean(E(c100)$weight)
g100 <- delete_edges(c100, E(c100)[weight < cut.off1])
c_g100 <- cluster_fast_greedy(g100)
plot(c_g100, g100,
#vertex.size = colSums(co_covid_positivo) * 10,
#vertex.frame.color = NA,
#vertex.label.color = "black",
#vertex.label.cex = 1,
edge.width = E(g100)$weight * 15,
layout = layout_with_fr(g100),
main = paste0('Between ', mins,' and ' , maxs, ' confirmed cases'))
}
grafo.plot(mins = 5000, maxs = 1000000)
library(igraph)
library(dplyr)
grafo.plot(mins = 5000, maxs = 1000000)
names(banco_imputado)[-c(1:3)] <- c(33:34, 'y', 1:32)
covid <- select(banco_imputado, 4:36) %>%
cor()
c100 <- graph.adjacency(covid,
weighted = TRUE,
diag = FALSE,
mode = "upper")
cut.off1 <- mean(E(c100)$weight)
g100 <- delete_edges(c100, E(c100)[weight < cut.off1])
c_g100 <- cluster_fast_greedy(g100)
plot(c_g100, g100,
#vertex.size = colSums(co_covid_positivo) * 10,
#vertex.frame.color = NA,
#vertex.label.color = "black",
#vertex.label.cex = 1,
edge.width = E(g100)$weight * 15,
layout = layout_with_fr(g100),
main = 'COVID-19 worldwide')
windows()
plot(c_g100, g100,
#vertex.size = colSums(co_covid_positivo) * 10,
#vertex.frame.color = NA,
#vertex.label.color = "black",
#vertex.label.cex = 1,
edge.width = E(g100)$weight * 15,
layout = layout_with_fr(g100),
main = 'COVID-19 worldwide')
grafo.plot(mins = 5000, maxs = 1000000)
grafo.plot(mins = 1, maxs = 1000)
grafo.plot(mins = 1000, maxs = 5000)
windows()
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y, x = xgb.pred, label = test$Country)) +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,300), c(1,300)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 300) + ylim(0, 300)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y, x = rf.pred, label = test$Country)) +
geom_point(aes(y = test$y, x = rf.pred)) +
geom_line(aes(c(1,82000), c(1,82000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19',
title = 'Random Forest')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = rf.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = rf.pred)) +
geom_line(aes(c(1,300), c(1,300)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19',
title = 'Random Forest') +
xlim(0, 300) + ylim(0, 300)
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y, x = xgb.pred, label = test$Country)) +
geom_point(aes(y = test$y, x = xgb.pred)) +
geom_line(aes(c(1,62000), c(1,62000)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19', title = 'GBM')
ggplot2::ggplot() +
geom_text_repel(aes(y = test$y,
x = xgb.pred,
label = test$Country)) +
geom_point(aes(y = test$y,
x = xgb.pred)) +
geom_line(aes(c(1,300), c(1,300)), linetype = 'dashed') +
labs(x = 'Predict', y = 'Confirmed Cases of COVID-19') +
xlim(0, 300) + ylim(0, 300)
MSE(rf.pred, test$y)
install.packages('MLmetrics')
require(MLmetrics)
MSE(rf.pred, test$y)
MSE(gbm.pred, test$y)
MSE(xgb.pred, test$y)
MSE(rf.pred, test$y)
MSE(xgb.pred, test$y)
